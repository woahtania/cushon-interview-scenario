{
  "env": {
    "browser": true,
    "es2021": true,
    "node": true,
    "jest/globals": true
  },
  "extends": [
    "airbnb",
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:import/typescript"
    ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "plugins": [
    "react",
    "react-hooks",
    "import",
    "@typescript-eslint",
    "jest"
  ],
  "settings": {
    "import/resolver": {
      "typescript": {
        "project": [
          "./tsconfig.base.json",
          "./apps/*/tsconfig.json",
          "./libs/*/tsconfig.json"
        ],
        "node": {
          "extensions": [".js", ".jsx", ".ts", ".tsx", "*.android.ts", "*.ios.ts"]
        }
      }
    }
  },
  "rules": {
    // always put parentheses around arguments in arrow functions as it is more readable
    "arrow-parens": ["error", "always"],
    // put else on line AFTER the closing } of preceding if, we find it more readable PLUS it allows inserting comment lines between if and else !!!
    // https://eslint.org/docs/rules/brace-style
    "brace-style": ["error", "stroustrup",
      {
        "allowSingleLine": true
      }
    ],
    // we see no good reason to enforce this rule
    // https://eslint.org/docs/rules/class-methods-use-this#enforce-that-class-methods-utilize-this-class-methods-use-this
    "class-methods-use-this": "off",
    // named exports are preferred to optimise webpack tree shaking
    "import/prefer-default-export": "off",
    // enforce import order to group by location
    "import/order": ["error", {
      "groups": [
        // imports from node and installed packages
        ["builtin", "external"],
        // imports from @ocasta-frontends
        "internal",
        // imports from within project
        ["parent", "sibling", "index"]
      ]
    }],
    // "import/no-default-export": "error",
    // we write code on large screens, it"s more readable to keep statements on 1 line that arbitrarily restrict line length 
    "max-len": "off",
    // console logs are useful to help us debug recent code on dev. a function disables all alerts in production builds
    "no-console": "off",
    // we reassign classes to use connect on components when we don"t want to rename them
    "no-class-assign": "off",
    // this rules imposes unnecesary parentheses because it ignores basic arithmetic operator priority
    "no-mixed-operators": "off",
    // feel free to use 2 empty lines to separate groups of functions that go together within a file, for example request/success/error groups
    "no-multiple-empty-lines": "off",
    // we allow param reassign to set defaults inside functions
    // https://blog.javascripting.com/2015/09/07/fine-tuning-airbnbs-eslint-config/
    "no-param-reassign": "off",
    // allow ++ in the final expression of for loop
    "no-plusplus": ["error",
      {
        "allowForLoopAfterthoughts": true
      }
    ],
    // turn this rule off if you will never use an object that shadows an Object.prototype method or which does not inherit from Object.prototype
    // https://eslint.org/docs/rules/no-prototype-builtins#disallow-use-of-objectprototypes-builtins-directly-no-prototype-builtins
    // this imposes needlessly verbose syntax when the real issue is you should neveer overwrite standard JS prototypes
    "no-prototype-builtins": "off",
    // we find ternary more readable than the suggested airbnb alternative
    "no-unneeded-ternary": "off",
    // again feels free to use white space for readability and separating logical blocks of code
    "padded-blocks": "off",
    // if we get several things out of same object, we prefer destructuring to save repetition
    // however we see no good reason to enforce destructuring to get 1 thing out of an object, it"s needlessly complicated syntax
    // and array destructuring syntax is just confusing and unreadable for no actual gain
    // https://eslint.org/docs/rules/prefer-destructuring
    "prefer-destructuring": ["off",
      {
        "VariableDeclarator": {
          "array": false,
          "object": true
        },
        "AssignmentExpression": {
          "array": false,
          "object": true
        }
      },
      {
        "enforceForRenamedProperties": false
      }
    ],
    // same as above for react props, use whichever is more readable dependeing on how many props you access
    "react/destructuring-assignment": ["off", "always"],
    // explicitely specifiying the radix was only necessary for a bug in IE8
    // https://blog.javascripting.com/2015/09/07/fine-tuning-airbnbs-eslint-config/
    "radix": "off",
    // allow jsx in .js files because jsx is not a language, just an extension of js
    "react/jsx-filename-extension": "off",
    // I prefer React.Fragment to the shorthand as it"s more eplicit than an empty tag
    "react/jsx-fragments": "off",
    // we allow multiple components in same file when they are always used together, for examples list elements and list
    "react/no-multi-comp": "off",
    "react/prop-types": "off",
    // do not require default props because we make the default intelligently in code
    "react/require-default-props": ["off",
      {
        "forbidDefaultForRequired": true
      }
    ],
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    // according to the new airbnb styleguide, component declarations should be functions
    "react/function-component-definition": "off",
    // allowing `unstable` nested components as props, as this pattern is used a lot in react navigation
    // see https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-unstable-nested-components.md
    "react/no-unstable-nested-components": ["warn",
      {
        "allowAsProps": true
      }
    ],
    // this has effectively been replaced by typescript resolver. errors will still happen, but not from this rule
    "import/no-extraneous-dependencies": "off",
    // ignore import extensions for typescript files
    "import/extensions": [
      "off",
      "ignorePackages",
      {
        "js": "never",
        "jsx": "never",
        "ts": "never",
        "tsx": "never"
      }
    ],
    "react/display-name": "off",
    // this enables the use of underscore dangle in variable names, which is useful for unused variables
    // or internal access variables
    "no-underscore-dangle": "off",
    "dot-notation": "off",
    "react/react-in-jsx-scope": "off",
    "no-shadow": "off",
    "@typescript-eslint/no-shadow": "warn",
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "args": "all",
        "argsIgnorePattern": "^_",
        "caughtErrors": "all",
        "caughtErrorsIgnorePattern": "^_",
        "destructuredArrayIgnorePattern": "^_",
        "varsIgnorePattern": "^_",
        "ignoreRestSiblings": true
      }
    ]
  },
  "overrides": [
    {
      // all js files
      "files": ["*.js", "*.jsx"],
      "rules": {
        // allow style and children to not have proptypes
        "react/prop-types": ["error",
          {
            "ignore": [
              "style",
              "children",
              "className"
            ],
            "customValidators": [],
            "skipUndeclared": false
          }
        ],
        // configure this rule to allow appending unused variables with an underscore
        "no-unused-vars": [
          "error",
          {
            "args": "all",
            "argsIgnorePattern": "^_",
            "caughtErrors": "all",
            "caughtErrorsIgnorePattern": "^_",
            "destructuredArrayIgnorePattern": "^_",
            "varsIgnorePattern": "^_",
            "ignoreRestSiblings": true
          }
        ]
      }
    },
    // all test files
    {
      "files": ["*.spec.ts", "*.spec.tsx", "*.test.ts", "*.test.tsx", "*.test.js", "*.test.jsx"],
      "rules": {
        // allow hooks to be in different places in test files
        "react-hooks/rules-of-hooks": "off"
      }
    }
  ]
}
